"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
"""
import asyncio
import os
from fast_bitrix24 import Bitrix
from orm_bitrix24.entity import Portal
from dotenv import load_dotenv
load_dotenv()


async def test_contact_userfields():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    webhook = os.getenv("WEBHOOK")
    if not webhook:
        print("‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        bitrix = Bitrix(webhook)
        portal = Portal(bitrix)
        
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
        contact_fields = await portal.contact.fields.get_all()
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(contact_fields)} –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
        standard_fields = [field for field in contact_fields if not field.is_custom]
        custom_fields = [field for field in contact_fields if field.is_custom]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–µ–π: {len(standard_fields)}")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π: {len(custom_fields)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
        print(f"\nüìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è (–ø–µ—Ä–≤—ã–µ 5):")
        for field in standard_fields[:5]:
            print(f"   - {field.name}: {field.title} ({field.type})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
        if custom_fields:
            print(f"\nüîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è:")
            for field in custom_fields:
                print(f"   - {field.name}: {field.title} ({field.type})")
                
                # –ï—Å–ª–∏ —ç—Ç–æ enumeration –ø–æ–ª–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                if field.type == 'enumeration' and field.values:
                    print(f"     –ó–Ω–∞—á–µ–Ω–∏—è ({len(field.values)}):")
                    for enum_value in field.values[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
                        print(f"       ‚Ä¢ {enum_value.value} (ID: {enum_value.id})")
                    if len(field.values) > 3:
                        print(f"       ... –∏ –µ—â–µ {len(field.values) - 3} –∑–Ω–∞—á–µ–Ω–∏–π")
        else:
            print(f"\nüîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_contact_userfields()) 